"use strict";

const mapContainers = document.querySelectorAll(".mapbox");

for (const mapContainer of mapContainers) {
    const id = mapContainer.id;
    const mapcenter = [mapContainer.dataset.lng, mapContainer.dataset.lat];
    const mapzoom = mapContainer.dataset.zoom;

    mapboxgl.accessToken =
        "pk.eyJ1IjoidGFrYXN1bWlyIiwiYSI6ImNrcHM3Y2RveTB1ZjEyb2xlY3JqMnY3M2YifQ.56Fuk-wulc0J4CVux7ICKQ";
    const map = new mapboxgl.Map({
        container: id,
        style: "mapbox://styles/mapbox/streets-v12",
        center: mapcenter,
        zoom: mapzoom,
    });

    map.on("load", async () => {
        const response = await fetch(mapContainer.dataset.source);
        const geoData = await response.json();

        geoData.features.forEach((element, index) => {
            if (element.geometry.type === "LineString") {
                map.addSource("feature" + index, {
                    type: "geojson",
                    data: element.geometry,
                });
                map.addLayer({
                    id: "feature" + index,
                    type: "line",
                    source: "feature" + index,
                    layout: (element.properties.layout ??= {
                        "line-join": "round",
                        "line-cap": "round",
                    }),
                    paint: (element.properties.paint ??= {
                        "line-color": "blue",
                        "line-width": 3,
                    }),
                });
            } else if (element.geometry.type === "Point") {
                const markerDom = document.getElementById(
                    element.properties.marker,
                );
                const marker = new mapboxgl.Marker({
                    element: markerDom,
                    anchor: "bottom",
                    offset: [0, 6],
                    color: element.properties.color,
                })
                    .setLngLat(element.geometry.coordinates)
                    .setPopup(
                        new mapboxgl.Popup({
                            offset: { top: [0, 0], bottom: [0, -40] },
                        }).setHTML(element.properties.html),
                    )
                    .addTo(map);
            }
        });
    });
}
